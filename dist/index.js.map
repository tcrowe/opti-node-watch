{"version":3,"sources":["../src/index.js"],"names":["fs","require","path","assert","EventEmitter","spawn","async","micromatch","isArray","isString","isNumber","isFinite","isNil","flatten","debounce","through","createProcess","process","env","NODE_ENV","cwd","chalk","unixRoot","windowsRootPattern","lineBreakPattern","internalErrorPatterns","colorErrorPatterns","urlPatterns","leadingQuotesPattern","trailingQuotesPattern","isAbsolutePath","str","startsWith","test","statList","absolutePaths","done","map","stat","hasNoInternalErrors","stdLine","every","pattern","indexOf","constructor","RegExp","Error","colorErrors","undefined","reduce","op","matches","exec","length","replace","red","colorUrls","bgHex","hex","underline","formatErrors","chunk","toString","split","filter","join","createWatcher","opts","watchPatterns","restartDelay","extensions","script","item","watcher","globPatterns","fsWatchers","write","queue","errorChunks","errorTimer","writeError","clearTimeout","push","setTimeout","end","stdout","autoDestroy","stderr","concat","resolve","proc","respawn","removeAllListeners","unpipe","kill","args","cmd","trim","execCmd","execArgs","forEach","optiNodeOpts","addListener","emit","err","pipe","restart","fsWatcherChange","fsWatcher","evtType","filename","fsWatcherClose","fsWatcherError","watcherHelp","createWatchers","stats","index","watch","watcherEvents","watchers","stop","close","error","watchPaths","steps","auto","start","module","exports"],"mappings":"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","sourcesContent":["/*\n\nopti-node-watch\n\n+ watch files\n+ execute node script with opti-node\n+ OR run a custom shell script\n\nAPI doc in ../readme.md\n\n@module opti-node-watch\n\nSee ../COPYING for GPL 3.0 license\n\n*/\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst assert = require(\"assert\");\nconst { EventEmitter } = require(\"events\");\nconst { spawn } = require(\"child_process\");\nconst async = require(\"async\");\nconst micromatch = require(\"micromatch\");\nconst isArray = require(\"lodash/isArray\");\nconst isString = require(\"lodash/isString\");\nconst isNumber = require(\"lodash/isNumber\");\nconst isFinite = require(\"lodash/isFinite\");\nconst isNil = require(\"lodash/isNil\");\nconst flatten = require(\"lodash/flatten\");\nconst debounce = require(\"lodash/debounce\");\nconst through = require(\"through\");\nconst { createProcess } = require(\"opti-node\");\nconst { NODE_ENV = \"development\" } = process.env;\nconst cwd = process.cwd();\n\n// lazy load chalk later\nlet chalk;\n\n// try to detect root paths with these\nconst unixRoot = \"/\";\nconst windowsRootPattern = /^[A-Z]:\\\\\\\\/;\n\n// patterns to format and colorize the error output\nconst lineBreakPattern = /\\n/;\nconst internalErrorPatterns = [\n  \"internal/modules/cjs/loader.js\",\n  \"internal/bootstrap/node.js\"\n];\nconst colorErrorPatterns = [/[a-z]{3,10}?Error/gim];\nconst urlPatterns = [/(?!:\\()\\/.+(?=\\))/gim];\nconst leadingQuotesPattern = /^(\"|')/;\nconst trailingQuotesPattern = /(\"|')$/;\n\n/**\n * True when a string is likely to be an absolute path\n * @private\n * @method isAbsolutePath\n * @param {string} str\n * @returns {boolean}\n */\nconst isAbsolutePath = str =>\n  str.startsWith(unixRoot) === true || windowsRootPattern.test(str) === true;\n\n/**\n * Stat a bunch of absolute paths. For use as async function.\n * @private\n * @method statList\n * @param {string[]} absolutePaths\n * @returns {function}\n */\nconst statList = absolutePaths => done =>\n  async.map(absolutePaths, fs.stat, done);\n\n/**\n * True if every item in the list does not match any node internal error\n * @private\n * @method hasNoInternalErrors\n * @param {string} stdLine\n * @returns {boolean}\n */\nconst hasNoInternalErrors = stdLine =>\n  internalErrorPatterns.every(pattern => {\n    if (isString(pattern) === true) {\n      return stdLine.indexOf(pattern) === -1;\n    }\n\n    if (pattern.constructor === RegExp) {\n      return pattern.test(stdLine) === false;\n    }\n\n    throw new Error(\"internalErrorPatterns has a bad element\");\n  }) === true;\n\n/**\n * Take a string from stderr and color error types\n * @private\n * @method colorErrors\n * @param {string} stdLine\n * @returns {string}\n */\nfunction colorErrors(stdLine) {\n  // lazy load chalk\n  if (chalk === undefined) {\n    chalk = require(\"chalk\");\n  }\n\n  return colorErrorPatterns.reduce((op, pattern) => {\n    const matches = pattern.exec(op);\n\n    if (matches !== null && matches.length > 0) {\n      op = op.replace(pattern, chalk.red(matches[0]));\n    }\n\n    return op;\n  }, stdLine);\n}\n\n/**\n * Highlight paths and urls in the stderr output\n * @private\n * @method colorUrls\n * @param {string} stdLine\n * @returns {string}\n */\nfunction colorUrls(stdLine) {\n  // lazy load chalk\n  if (chalk === undefined) {\n    chalk = require(\"chalk\");\n  }\n\n  return urlPatterns.reduce((op, pattern) => {\n    const matches = pattern.exec(op);\n\n    if (matches !== null && matches.length > 0) {\n      op = op.replace(\n        pattern,\n        chalk\n          .bgHex(\"#000000\")\n          .hex(\"#EEEEEE\")\n          .underline(matches[0])\n      );\n    }\n\n    return op;\n  }, stdLine);\n}\n\n/**\n * Break up stderr output into an array, colorize, and join back to a string\n * @private\n * @method formatErrors\n * @param {string|buffer} chunk\n * @returns {string}\n */\nconst formatErrors = chunk =>\n  chunk\n    .toString()\n    .split(lineBreakPattern)\n    .filter(hasNoInternalErrors)\n    .map(colorErrors)\n    .map(colorUrls)\n    .join(\"\\n\");\n\n/**\n * Create an opti-node-watch object\n * @public\n * @method createWatcher\n * @param {object} opts\n * @param {string[]} opts.watchPatterns list of absolute paths\n * @param {number} [opts.restartDelay=0] how long to wait before restarting\n * @param {string[]} [extensions=js,jsx,json] extensions to watch\n * @param {string} [exec] command to execute\n * @param {string} [script] script to run with opti-node\n * @returns {object}\n */\nfunction createWatcher(opts) {\n  const {\n    watchPatterns = [],\n    restartDelay = 0,\n    extensions = [\"js\", \"jsx\", \"json\"],\n    exec = \"\",\n    script = \"\"\n  } = opts;\n\n  //\n  // strictly validate all the inputs\n  //\n\n  assert(isArray(watchPatterns) === true, \"watchPatterns is an array\");\n\n  assert(\n    watchPatterns.every(item => isString(item) === true) === true,\n    \"watchPatterns is an array of strings\"\n  );\n\n  assert(\n    extensions.every(item => isString(item) === true) === true,\n    \"extensions is an array of strings\"\n  );\n\n  assert(isNumber(restartDelay) === true, \"restartDelay is a number\");\n\n  assert(isFinite(restartDelay) === true, \"restartDelay is a finite number\");\n\n  assert(isString(exec) === true, \"exec is a string\");\n\n  assert(isString(script) === true, \"script is a string\");\n\n  assert(\n    exec.length === 0 || script.length === 0,\n    \"you can use exec or script, but not both\"\n  );\n\n  const watcher = new EventEmitter();\n  const globPatterns = extensions.map(item => `*.${item}`);\n\n  watcher.fsWatchers = [];\n\n  function write(chunk) {\n    this.queue(chunk);\n  }\n\n  const errorChunks = [];\n  let errorTimer;\n\n  /**\n   * Used with through module to help us format errors and proxy\n   * stderr output\n   * @private\n   * @method writeError\n   * @param {string|buffer} chunk\n   */\n  function writeError(chunk) {\n    // in production give the output as-is\n    if (NODE_ENV === \"production\") {\n      return this.queue(chunk);\n    }\n\n    clearTimeout(errorTimer);\n    errorChunks.push(chunk.toString());\n    errorTimer = setTimeout(() => {\n      this.queue(formatErrors(errorChunks.join(\"\")));\n    }, 10);\n  }\n\n  /**\n   * For through module end argument. End of stream\n   * @private\n   * @method end\n   * @param {string} [chunk=\"\"]\n   */\n  function end(chunk = \"\") {\n    this.queue(chunk);\n  }\n\n  watcher.stdout = through(write, end, { autoDestroy: false });\n  watcher.stderr = through(writeError, end, { autoDestroy: false });\n\n  // unless the user passed absolute paths to watch prefix it with `cwd`\n  const absolutePaths = []\n    .concat(flatten(watchPatterns))\n    .map(item => {\n      if (isAbsolutePath(item) === true) {\n        return item;\n      }\n\n      return path.join(cwd, item);\n    })\n    .map(item => path.resolve(item));\n\n  let proc;\n\n  /**\n   * Restart the child process\n   * @private\n   * @method respawn\n   */\n  function respawn() {\n    if (isNil(proc) === false) {\n      proc.stderr.removeAllListeners();\n      proc.stderr.end();\n      proc.stderr.unpipe();\n      proc.stdout.removeAllListeners();\n      proc.stdout.end();\n      proc.stdout.unpipe();\n      proc.removeAllListeners();\n      proc.kill();\n    }\n\n    const { env } = process;\n    const opts = { env };\n    const args = [];\n    let cmd;\n\n    // run opti-node\n    // e.g. opti-node script.js\n    if (exec === \"\") {\n      args.push(script);\n    }\n\n    // execute something else\n    if (exec !== \"\") {\n      const [execCmd, ...execArgs] = exec\n        .trim()\n        .replace(leadingQuotesPattern, \"\")\n        .replace(trailingQuotesPattern)\n        .split(\" \");\n      cmd = execCmd;\n      execArgs.forEach(item => args.push(item));\n    }\n\n    if (isNil(cmd) === false) {\n      // not running opti-node\n      proc = spawn(cmd, args, opts);\n    } else {\n      // running with opti-node\n      const optiNodeOpts = { args, opts };\n      optiNodeOpts.cmd = cmd;\n      proc = createProcess(optiNodeOpts);\n    }\n\n    proc.addListener(\"close\", () => watcher.emit(\"proc-close\"));\n    proc.addListener(\"disconnect\", () => watcher.emit(\"proc-disconnect\"));\n    proc.addListener(\"error\", err => watcher.emit(\"proc-error\", err));\n    proc.addListener(\"exit\", () => watcher.emit(\"proc-exit\"));\n    proc.stdout.pipe(watcher.stdout);\n    proc.stderr.pipe(watcher.stderr);\n  }\n\n  /**\n   * Debounced restart function using delay from the user\n   * @private\n   * @method restart\n   */\n  const restart = debounce(respawn, restartDelay);\n\n  /**\n   * Event handler for FSWatcher change event\n   * @private\n   * @method fsWatcherChange\n   * @param {object} fsWatcher\n   * @returns {function}\n   */\n  const fsWatcherChange = fsWatcher => (evtType, filename) => {\n    const { path } = fsWatcher;\n    const matches = micromatch(filename, globPatterns);\n\n    if (isNil(matches) === false && matches.length > 0) {\n      watcher.emit(\"change\", { path, evtType, filename });\n      restart();\n    }\n  };\n\n  /**\n   * Event handler for FSWatcher close event\n   * @private\n   * @method fsWatcherClose\n   * @param {object} fsWatcher\n   * @returns {function}\n   */\n  const fsWatcherClose = fsWatcher => () => {\n    const { path } = fsWatcher;\n    watcher.emit(\"close\", { path });\n  };\n\n  /**\n   * Event handler for FSWatcher error event\n   * @private\n   * @method fsWatcherError\n   * @param {object} fsWatcher\n   * @returns {function}\n   */\n  const fsWatcherError = () => err => {\n    err.watcherHelp = \"fs watcher error\";\n    watcher.emit(\"error\", err);\n  };\n\n  /**\n   * Create FSWatcher objects for each absolute path. Async function\n   * @private\n   * @method createWatchers\n   * @param {object} results\n   * @param {object[]} results.stats array of Stat\n   * @returns {function}\n   */\n  const createWatchers = ({ stats }, done) =>\n    done(\n      null,\n      stats.map((item, index) => {\n        const path = absolutePaths[index];\n        const watcher = fs.watch(path);\n        watcher.path = path;\n        watcher.stat = item;\n        return watcher;\n      })\n    );\n\n  /**\n   * Assign event listeners to all the watchers. Async function\n   * @private\n   * @method watcherEvents\n   * @param {object} results\n   * @param {object[]} results.watchers\n   * @returns {function}\n   */\n  const watcherEvents = ({ watchers }, done) => {\n    watchers.forEach(fsWatcher => {\n      fsWatcher.addListener(\"change\", fsWatcherChange(fsWatcher));\n      fsWatcher.addListener(\"close\", fsWatcherClose(fsWatcher));\n      fsWatcher.addListener(\"error\", fsWatcherError(fsWatcher));\n    });\n    done();\n  };\n\n  /**\n   * Attempt to gracefully shutdown all the watchers\n   * @public\n   * @method watcher.stop\n   */\n  watcher.stop = () => {\n    watcher.fsWatchers.forEach(item => {\n      try {\n        item.removeAllListeners();\n        item.close();\n      } catch (error) {\n        error.watcherHelp = \"error while stopping watcher\";\n        watcher.emit(\"error\", error);\n      }\n    });\n  };\n\n  /**\n   * Watch the paths provided for changes. Probably doesn't need to be public\n   * @public\n   * @method watcher.watchPaths\n   */\n  watcher.watchPaths = () => {\n    const steps = {\n      stats: statList(absolutePaths),\n      watchers: [\"stats\", createWatchers],\n      watcherEvents: [\"watchers\", watcherEvents]\n    };\n\n    async.auto(steps, err => {\n      if (isNil(err) === false) {\n        err.watcherHelp = \"error while setting up watchers\";\n        return watcher.emit(\"error\", err);\n      }\n\n      watcher.emit(\"started\");\n      respawn();\n    });\n  };\n\n  /**\n   * Start the watcher. Creates FSWatcher objects and wires up events\n   * @method watcher.start\n   */\n  watcher.start = () => {\n    watcher.watchPaths();\n  };\n\n  return watcher;\n}\n\nmodule.exports = { createWatcher };\n"],"file":"index.js"}